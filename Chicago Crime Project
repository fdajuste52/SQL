--Write and execute a SQL query to list the school names, community names and average attendance for communities with a hardship index of 98.--
SELECT CH_PS.NAME_OF_SCHOOL, CH_CD.COMMUNITY_AREA_NAME, CH_PS.AVERAGE_STUDENT_ATTENDANCE
FROM CHICAGO_PUBLIC_SCHOOLS AS CH_PS
	JOIN CHICAGO_CENSUS_DATA AS CH_CD
ON CH_PS.COMMUNITY_AREA_NUMBER = CH_CD.COMMUNITY_AREA_NUMBER
WHERE CH_CD.HARDSHIP_INDEX = 98;

--Write and execute a SQL query to list all crimes that took place at a school. Include case number, crime type and community name.--
SELECT CH_CD.CASE_NUMBER, CH_CD.PRIMARY_TYPE, CH_D.COMMUNITY_AREA_NAME, CH_CD.LOCATION_DESCRIPTION
FROM CHICAGO_CRIME_DATA AS CH_CD
LEFT JOIN CHICAGO_CENSUS_DATA AS CH_D
ON CH_CD.COMMUNITY_AREA_NUMBER = CH_D.COMMUNITY_AREA_NUMBER
WHERE CH_CD.LOCATION_DESCRIPTION LIKE '%SCHOOL%';

--Write and execute a SQL statement to create a view showing the columns listed in the following table, with new column names as shown in the second column.--
CREATE VIEW CHI_CPS AS
SELECT "NAME_OF_SCHOOL" AS School_Name,
				"SAFETY_ICON" AS Safety_Rating,
				"FAMILY_INVOLVEMENT_ICON" AS Family_Rating,
				"ENVIRONMENT_ICON" AS Environment_Rating,
				"INSTRUCTION_ICON" AS Instruction_Rating,
				"LEADERS_ICON" AS Leaders_Rating,
				"TEACHERS_ICON" AS Teachers_Rating
FROM CHICAGO_PUBLIC_SCHOOLS;
--Write and execute a SQL statement that returns all of the columns from the view.--
SELECT * FROM CHI_CPS;
--Write and execute a SQL statement that returns just the school name and leaders rating from the view.--
SELECT School_Name, Leaders_Rating FROM CHI_CPS;

--Write the structure of a query to create or replace a stored procedure called UPDATE_LEADERS_SCORE that takes a in_School_ID parameter as an integer and a in_Leader_Score parameter as an integer. Donâ€™t forget to use the #SET TERMINATOR statement to use the @ for the CREATE statement terminator.--
--#SET TERMINATOR @
CREATE OR REPLACE PROCEDURE UPDATE_LEADERS_SCORE      

LANGUAGE SQL                        
READS SQL DATA                      

DYNAMIC RESULT SETS 1               

BEGIN 

    DECLARE C1 CURSOR               
    WITH RETURN FOR                 
    
    SELECT "SCHOOL_ID", "LEADERS_SCORE" FROM CHICAGO_PUBLIC_SCHOOLS;          
    
    OPEN C1;                      

END
@                                   

CALL UPDATE_LEADERS_SCORE
@

--Inside your stored procedure, write a SQL statement to update the Leaders_Score field in the CHICAGO_PUBLIC_SCHOOLS table for the school identified by in_School_ID to the value in the in_Leader_Score parameter.--
--#SET TERMINATOR @
CREATE OR REPLACE PROCEDURE UPDATE_LEADERS_SCORE(IN in_School_ID INTEGER, IN in_Leaders_Score INTEGER)       
LANGUAGE SQL                        
MODIFIES SQL DATA                      

BEGIN 

	UPDATE CHICAGO_PUBLIC_SCHOOLS
	SET "LEADERS_SCORE"= in_Leaders_Score
	WHERE "SCHOOL_ID" = in_School_ID;
	
	
--Inside your stored procedure, write a SQL IF statement to update the Leaders_Icon field in the CHICAGO_PUBLIC_SCHOOLS table for the school identified by in_School_ID using the following information.--
	IF in_Leaders_Score > 0 AND in_Leaders_Score < 20 THEN
		UPDATE CHICAGO_PUBLIC_SCHOOLS
		SET "LEADERS_ICON" = 'Very_weak'
		WHERE "SCHOOL_ID" = in_School_ID;

	ELSEIF in_Leaders_Score < 40 THEN
		UPDATE CHICAGO_PUBLIC_SCHOOLS
		SET "Leaders_Icon" = 'Weak'
		WHERE "SCHOOL_ID" = in_School_ID;

	ELSEIF in_Leaders_Score < 60 THEN
		UPDATE CHICAGO_PUBLIC_SCHOOLS
		SET "LEADERS_ICON" = 'Average'
		WHERE "SCHOOL_ID" = in_School_ID;

	ELSEIF in_Leaders_Score < 80 THEN
		UPDATE CHICAGO_PUBLIC_SCHOOLS
		SET "LEADERS_ICON" = 'Strong'
		WHERE "SCHOOL_ID" = in_School_ID;

	ELSEIF in_Leaders_Score < 100 THEN
		UPDATE CHICAGO_PUBLIC_SCHOOLS
		SET "LEADERS_ICON" = 'Very_strong'
		WHERE "SCHOOL_ID" = in_School_ID;
--Update your stored procedure definition. Add a generic ELSE clause to the IF statement that rolls back the current work if the score did not fit any of the preceding categories.--
	ELSE ROLLBACK WORK;
	END IF;
--Update your stored procedure definition again. Add a statement to commit the current unit of work at the end of the procedure.--
	COMMIT WORK;
END
@   
